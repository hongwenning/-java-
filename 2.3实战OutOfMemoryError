除了程序计数器外，其他几个区域都有发生OutOfMemoryError异常的可能

1、java堆溢出 不断创建对象到达最大堆的容量限制后产生内存溢出
package java虚拟机;
/*-verbose:gc -Xms512M -Xmx512M  -Xmn512M     
-XX:+PrintGCDetails -
XX:SurvivorRati*/

import java.util.ArrayList;
import java.util.List;

public class HeapOOM {
    static class OOMobject{
    }
    public static void main(String args[]) {
       List<OOMobject> list=new ArrayList<OOMobject>();
       while(true) {
    	   list.add(new OOMobject());
       }
    }
}
错误：exception in thread "main" java.lang.OutOfMemoryError: Java heap space
 
 
2、虚拟机栈和本地方法栈溢出
HotSpot虚拟机中不区分虚拟机栈和本地方法栈
如果线程请求的栈深度大于虚拟机所允许的最大深度，将抛出StackOverflowError异常
如果虚拟机在扩展栈是无法申请大足够的内存空间，则抛出OutOfmemoryError异常

package java虚拟机;

public class JavaVMStackSOHF {
     private int stackLength =1;
     public void stackLeak()
     {
    	 stackLength++;
    	 stackLeak();
     }
     public static void main(String arg[]) throws Throwable {
    	 JavaVMStackSOHF oom = new JavaVMStackSOHF();
    	 try {
    		 oom.stackLeak();
    	 }catch(Throwable e) {
    		 System.out.println("stack length:"+oom.stackLength);
    		 throw e;
    	 }
     }
}
错误：java.lang.StackOverflowError

3、方法区和运行时常量池溢出
运行时常量池是方法区的一部分，jdk1.7开始逐步去永久代（在 Jdk6 以及以前的版本中，字符串的常量池是放在堆的Perm区的，Perm区是一个类静态的区域，主要存储一些加载类的信息，常量池，方法片段等内容，默认大小只有4m，一旦常量池中大量使用 intern 是会直接产生java.lang.OutOfMemoryError:PermGen space错误的。
在 jdk7 的版本中，字符串常量池已经从Perm区移到正常的Java Heap区域了。为什么要移动，Perm 区域太小是一个主要原因，
Jdk8已经直接取消了Perm区域，而新建立了一个元区域。应该是jdk开发者认为Perm区域已经不适合现在 JAVA 的发展了。
）
package java虚拟机;

import java.util.ArrayList;
import java.util.List;

public class RuntimeConstantPoolOOM {
     public static void main(String args) {
    	 List<String> list =new ArrayList<String>();
    	 int i=0;
    	 while(true) {
    		 list.add(String.valueOf(i++).intern());
    	 }
     }
}


package java虚拟机;

public class JavaMethodAreaOOM {
  public static void main(String args) {
	  while(true) {
		  Enhancer enhancer = new Enhancer();
		  enhancer.setSuperclass(OOMObject.class);
		  enhancer.setUseCache(false);
		  enhancer.setCallback(new MethodInterceptor)()
		  {
			  public Object intercept(Object obj,Methodmethod,Object[] args,MethodProxy proxy) throw Throwable{
				  return proxy.invokeSuper(obj,args);
				  
			  }
		  });
		  enhancer.create();
	  }
  }
  static class OOMObject{
	  
  }
}


4、本机直接内存溢出
public class DirectMemoryOOM{
    
    private static final int _1MB =1024*1024;
    public static void main(String[] args) throws Exception{
     Field static void main(String args[]){
     unsafeField =Unsafe.class.getDeclaredFields()[0];
     Unsafe unsafe =(Unsafe) unsafeField.get(null）；
     while(true){
        unsafe.allocateMemory(1MB);
}
}
}





















