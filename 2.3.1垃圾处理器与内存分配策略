2.3.1对象
1.引用计数算法
给对象一个引用计数器，每次引用计数器值加1；引用失效减1。
但是主流的Java虚拟机里面并没有引用计数算法来管理内存，其中最主要的原因是它很难解决对象间相互循环引用的问题
比如：objA和objB都有字段instance，令objA.instance=objB及objB.instance=objA除此之外再无这两个对象再无引用，GC收集器无法通过计数器通知回收。
2.可达性分析算法
在Java中，是通过可达性分析（Reachability Analysis）来判定对象是否存活的。该算法的基本思路就是通过一些被称为引用链（GC Roots）的对象作为起点，
从这些节点开始向下搜索，搜索走过的路径被称为（Reference Chain)，当一个对象到GC Roots没有任何引用链相连时（即从GC Roots节点到该节点不可达），
则证明该对象是不可用的。https://www.jianshu.com/p/8f5fa8288d9b
3.引用
强引用：new
》软引用
》弱引用
》虚引用
4.生存还是死亡
可达性算法不可达后，进入缓刑状态，至少经过两次标记过程。
在进行过可达性分析后的对象也不一定是非死不可的，该对象进行可达性分析后，发现没有与GC Roots相连接的引用链，
这个对象就会第一次被标记起来；对对象是否必要执行finalize函数进行判断；（已经被GC调用过finalize方法或者没有重写finalize方法
都认为是没有必要执行该finalize函数的）F-Queue队列中存放该对象，优先级较低的Finalizer会去执行它；Gc 会对这个队列里面的对象再进行一次标记，
如果在finalize方法中，对象没有自己自救的话，它就会被标记回收finalize方法自救自己的办法是：重新与引用链上面的任何一个对象建立连接，
或者把自己this赋值给某个类或对象的成员变量。

并不鼓励使用这种办法来拯救对象，它的运行代价高昂，不确定性大，无法保证顺序；
finalize方法能做的所有工作，try-finally也可以做的更好，更及时，所以希望忘记这个方法的存在；
https://blog.csdn.net/lvyinxiazheyang/article/details/88560387
5.回收方法区
Java虚拟机规范中规定不要求虚拟机在方法区实现垃圾收集，而且在方法区实现垃圾收集性价比确实很低。在堆中，尤其是新生代，一次垃圾收集可以回收75%-95%的空间，
而永久代的垃圾回收效率远低于此。永久代的垃圾收集主要回收两部分：废弃常量和无用的类。回收废弃常量与回收Java堆的对象非常相似。
以常量池的字面量的回收为例，例如字符串“abc”进入常量池，但是当前系统没有任何一个string对象引用常量池的字符串“abc”，也没有其他地方引用这个字面量，
若此时发生回收，则“abc”常量将被回收。常量池中的其他类（接口）、方法、字段的符号引用也与此类似。判定一个类是“无用的”较为苛刻，需满足三个条件，
满足以下三个条件无用类才可以被回收（仅仅是可以，是否必然回收虚拟机有其他参数控制）：该类所有的实例都已被回收，也就是Java堆中不存在该类的任何实例。
加载该类的classloader已被回收。该类对应的java.long.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该方法。

2.3.2垃圾收集算法
https://blog.csdn.net/hewenya12/article/details/80688169
垃圾收集算法的实现涉及大量程序细节，而且各个平台的虚拟机操作内存的方法又各不相同，因此不打算过多的讨论算法的实现，只是介绍集中算法的思想和发展过程。

1.标记-清除算法
标记清除算法是垃圾处理器最初的清理算法，也是最基础的清理算法，了解了这个后边两个基本就清楚了。
标记，清除算法，字面意思就是先标记，再清除
标记阶段：标记所有GC roots不可达的对象，进行标记
清除阶段：对上面标记过的对象进行清除回收
缺点：
  1.回收时需要先停止虚拟机的工作，就是stop the world.
  2标记清除要遍历整个堆，效率低
  3.清除后会产生大量碎片区域，无法为大对象分配连续的内存
 
 2.复制算法
 复制算法是在标记清除的基础上改进的，把内存区域平分为两个部分，每次新建对象只在一个区域内操作，
分为两个阶段
1.复制阶段：当堆内存不足时，先停掉jvm工作，把GCRoots可达的对象（即不可回收的对象）复制到另一半内存空间，在新的区域按顺序排列，重新分配对象的引用。
2.清楚阶段：原来的内存区域都是需要回收的对象，对整个区域进行一次full gc
优点：不会产生大量的碎片空间
缺点：内存使用率只有一半，确实挺浪费的，垃圾回收时同样要 stop the world,如果老年对象多，则每次要复制大量对象。
改进：
现代的商用虚拟机一般都采用这种方法回收新生代，IBM的研究表明，新生代有98%的内存都是需要回收的，大部分都是朝生夕死。内存不必1:1分配，
将内存划分为一块较大的Eden空间和两块较小的Survivor空间，每次使用Eden和其中一块Survivor。当回收时，将Eden和Survivor中还存活的对象
一次性地复制到另外一块Survivor空间，最后清理掉Eden和刚才用过的Survivor空间，清理完成后，刚刚被清理的Eden和另一块在回收时放入存活对
象的Survivor空间作为使用内存，刚被清理的Survivor作为保留空间，以便后面用来回收之用。这种改进的收集算法也有一个问题，就是在回收时，
那块空的Survivor空间能否放得下Eden和使用的Survivor空间中还存活的对象，如果Survivor空间不够存放上一次新生代收集下来的存活对象，
此时就需要向老年代“借”内存，那些剩余未放下的对象就通过分配担保机制进入老年代。

3.标记-整理算法
复制算法如果在对象存活率较高时，就需要进行较多次的复制操作，效率也会变低。而对于老年代中的对象，一般存活率都较高，因此需要选用其他收集算法：
标记 - 整理算法。标记过程仍然与“标记-清除”算法中一样，但是在标记完成后并不直接对可回收对象进行清理，而是让所有存活的对象都向一端移动，
然后直接清理掉端边界以外的内存。

4.分代收集算法
当前商业虚拟机都采用这个“分代收集”算法（Generation Collection），它根据对象存活周期的不同将内存划分为几块，一般是把java堆分为
新生代和老年代，根据各个年代的特点选用不同的收集算法。在新生代中，每次垃圾收集时都发现有大批对象死去，只有少量存活，因此可以选用“复制算法”，
此时只需要付出少量存活对象的复制成本即可；对于老年代，因为对象存活率较高、也没有额外空间为期分配担保，就必须使用“标记-清除”或“标记-整理”算法来进行回收。

2.3.3
HotSpot的算法实现
1.枚举根节点
     从可达性分析中从GC Roots节点找引用链这个操作为例,可作为GC Roots的节点主要在全局性的引用与执行上下文中,现在很多应用仅仅方法区就数百兆,
     若要逐个检查这里面的引用,那么必然会消耗很多时间.另外,可达性分析对执行时间的敏感还体现在GC停顿上,因为这项分析工作必须在一个能确保一致性的
     快照中进行—>这里"一致性"的意思是指整个分析期间整个执行系统看起来就像被冻结在某个时间点上,不可以出现分析过程中对象引用关系还在不断变化的情况,
     该点不满足的话分析结果准确性就无法得到保障.这点是导致GC进行时必须停顿所有Java执行线程(Sun将这件事情称为"Stop The World")的其中一个重要原因,
     即使是在号称不会发生停顿的CMS收集器中，枚举根节点时也是必须要停顿的.由于目前的主流Java虚拟机使用的都是准确式GC,所以当执行系统停顿下来后，
     并不需要一个不漏地检查完所有执行上下文和全局的引用位置,虚拟机应当是有办法直接得知哪些地方存放着对象引用.在HotSpot的实现中,是使用一组称为
     OopMap的数据结构来达到这个目的的,在类加载完成的时候,HotSpot就把对象内什么偏移量上是什么类型的数据计算出来,在JIT编译过程中,也会在特定的位置
     记录下栈和寄存器中哪些位置是引用,这样,GC在扫描时就可以直接得知这些信息了。

安全点(Safepoint)
        在OopMap的协助下,HotSpot可以快速且准确地完成GC Roots枚举,但一个很现实的问题随之而来:可能导致引用关系变化或者说OopMap内容变化的指令非常多,
        如果为每一条指令都生成OopMap,那将会需要大量的额外空间,这样GC的空间成本就会变得很高.
        实际上,HotSpot也的确没有为每条指令都生成OopMap,前面已经提到,在"特定的位置"记录这些信息,这些位置称为"安全点",即程序执行时并非在所有地方都能
        停顿下来开始GC,只有在到达安全点时才能暂停.安全点的选定既不能太少以致于让GC等待时间过长,也不能过于频繁以致于增大过分增大运行时的负荷,所以
        ,安全点的选定基本上是以程序"是否具有让程序长时间执行的特征"为标准选定的—>因为每条指令执行时间非常短暂,程序不太可能因为指令流长度太长而过长
        时间运行,"长时间执行"的最显著的特征就是指令序列复用.例如方法调用,循环跳转,异常跳转等,所有具有这些功能的指令才会产生安全点.
        对于安全点,另一个考虑的问题是如何在GC发生时让所有线程(不包括JNI调用的线程)都"跑"到最近的安全点上再停顿下来.这里有两种方案可供选择:
        1.抢先式中断
        抢先式中断不需要线程的执行代码去主动配合,在GC发生时,首先让所有线程全部中断,若发现线程中断的地方不在安全点,就恢复线程,让它"跑"到安全点,
        现在几乎没有虚拟机实现采用抢先式中断来暂停线程从而响应GC事件.
        2.主动式中断
        主动式中断的思想是当GC需要中断线程时,不直接对线程操作,仅仅简单的设个标志,各个线程执行过程中主动轮询这个标志,发现中断标志为真时就会自己中断官
        气,轮询标志的地方和安全点是重合的,另外再加上创建对象需要分配内存的地方.

安全区域
        使用Safepoint似乎已经完美解决了如何进入GC的问题,但实际情况却并不一定,Safepoint机制保证了线程执行时,在不太长的时间内就会遇见可进入GC的
        Safepoint.但是,程序不执行的时候呢?所谓的程序不执行就是没有分配CPU时间,典型的例子就是Thread.sleep,这个时候线程无法响应JVM的中断请求,"
        走"到安全的地方去中断挂起,JVM也显然不太可能等待线程重新被分配CPU时间,对于这种情况就需要安全区域(Safe Region)来解决.
        安全区域是指在一段代码中,引用关系不会发生变化.在这个区域中的任意地方开始GC都是安全的.我们也可以把Safe Region看作是被扩展了的Safepoint.
        在线程执行到Safe Region中的代码时,首先标识自己已经进入了Safe Region,那样,当在这段时间里JVM要发起GC时,就不用管标识自己为Safe Region状态的
        线程了.在线程要离开Safe Region时,它要检查系统是否已经完成了根节点枚举,如果完成了,那线程就继续执行,否则它就必须等待直到收到可以安全离开Safe
        Region的信号为止。
        
2.3.4垃圾收集器
      https://blog.csdn.net/zhanyu1/article/details/80025556
       A）、图中展示了7种不同分代的收集器：
       Serial、ParNew、Parallel Scavenge、Serial Old、Parallel Old、CMS、G1；

     （B）、而它们所处区域，则表明其是属于新生代收集器还是老年代收集器：

      新生代收集器：Serial、ParNew、Parallel Scavenge；

      老年代收集器：Serial Old、Parallel Old、CMS；

      整堆收集器：G1；

     （C）、两个收集器间有连线，表明它们可以搭配使用：

       Serial/Serial Old、Serial/CMS、ParNew/Serial Old、ParNew/CMS、Parallel Scavenge/Serial Old、Parallel Scavenge/Parallel Old、G1；

    （D）、其中Serial Old作为CMS出现"Concurrent Mode Failure"失败的后备预案（后面介绍）；

1-2、并发垃圾收集和并行垃圾收集的区别
    （A）、并行（Parallel）

       指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态；

       如ParNew、Parallel Scavenge、Parallel Old；

    （B）、并发（Concurrent）

       指用户线程与垃圾收集线程同时执行（但不一定是并行的，可能会交替执行）；

       用户程序在继续运行，而垃圾收集程序线程运行于另一个CPU上；    

       如CMS、G1（也有并行）；

1-3、Minor GC和Full GC的区别
    （A）、Minor GC

       又称新生代GC，指发生在新生代的垃圾收集动作；

       因为Java对象大多是朝生夕灭，所以Minor GC非常频繁，一般回收速度也比较快；

    （B）、Full GC

       又称Major GC或老年代GC，指发生在老年代的GC；

       出现Full GC经常会伴随至少一次的Minor GC（不是绝对，Parallel Sacvenge收集器就可以选择设置Major GC策略）；

       Major GC速度一般比Minor GC慢10倍以上；
       
       
       Serial收集器
       
       Serial（串行）垃圾收集器是最基本、发展历史最悠久的收集器；

       JDK1.3.1前是HotSpot新生代收集的唯一选择；
       

1、特点

      针对新生代；

      采用复制算法；

      单线程收集；

       进行垃圾收集时，必须暂停所有工作线程，直到完成；            

       即会"Stop The World"；

      Serial/Serial Old组合收集器运行示意图如下：



2、应用场景

      依然是HotSpot在Client模式下默认的新生代收集器；

      也有优于其他收集器的地方：

      简单高效（与其他收集器的单线程相比）；

      对于限定单个CPU的环境来说，Serial收集器没有线程交互（切换）开销，可以获得最高的单线程收集效率；

      在用户的桌面应用场景中，可用内存一般不大（几十M至一两百M），可以在较短时间内完成垃圾收集（几十MS至一百多MS）,只要不频繁发生，这是可以接受的

3、设置参数

      "-XX:+UseSerialGC"：添加该参数来显式的使用串行垃圾收集器；

4、Stop TheWorld说明

      JVM在后台自动发起和自动完成的，在用户不可见的情况下，把用户正常的工作线程全部停掉，即GC停顿；

      会带给用户不良的体验；

      从JDK1.3到现在，从Serial收集器-》Parallel收集器-》CMS-》G1，用户线程停顿时间不断缩短，但仍然无法完全消除；

      更多"Stop The World"信息请参考：《Java虚拟机垃圾回收(一) 基础》"2-2、可达性分析算法"

更多Serial收集器请参考：

      《Memory Management in the Java HotSpot™ Virtual Machine》 4.3节 Serial Collector（内存管理白皮书）：http://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf

      《Java Platform, Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide》 第5节 Available Collectors（官方的垃圾收集调优指南）：http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/collectors.html#sthref27
      
      
2、ParNew收集器
      ParNew垃圾收集器是Serial收集器的多线程版本。

  1、特点

      除了多线程外，其余的行为、特点和Serial收集器一样；

      如Serial收集器可用控制参数、收集算法、Stop The World、内存分配规则、回收策略等；

      两个收集器共用了不少代码；

      ParNew/Serial Old组合收集器运行示意图如下：



  2、应用场景

      在Server模式下，ParNew收集器是一个非常重要的收集器，因为除Serial外，目前只有它能与CMS收集器配合工作；

      但在单个CPU环境中，不会比Serail收集器有更好的效果，因为存在线程交互开销。

  3、设置参数

      "-XX:+UseConcMarkSweepGC"：指定使用CMS后，会默认使用ParNew作为新生代收集器；

      "-XX:+UseParNewGC"：强制指定使用ParNew；    

      "-XX:ParallelGCThreads"：指定垃圾收集的线程数量，ParNew默认开启的收集线程与CPU的数量相同；

  4、为什么只有ParNew能与CMS收集器配合
  
      CMS是HotSpot在JDK1.5推出的第一款真正意义上的并发（Concurrent）收集器，第一次实现了让垃圾收集线程与用户线程（基本上）同时工作；

      CMS作为老年代收集器，但却无法与JDK1.4已经存在的新生代收集器Parallel Scavenge配合工作；

      因为Parallel Scavenge（以及G1）都没有使用传统的GC收集器代码框架，而另外独立实现；而其余几种收集器则共用了部分的框架代码；

      关于CMS收集器后面会详细介绍。
      
      
3、Parallel Scavenge收集器
 Parallel Scavenge垃圾收集器因为与吞吐量关系密切，也称为吞吐量收集器（Throughput Collector）。

  1、特点

  （A）、有一些特点与ParNew收集器相似

      新生代收集器；

      采用复制算法；

      多线程收集；

  （B）、主要特点是：它的关注点与其他收集器不同

      CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间；

      而Parallel Scavenge收集器的目标则是达一个可控制的吞吐量（Throughput）；

      关于吞吐量与收集器关注点说明详见本节后面；

  2、应用场景

      高吞吐量为目标，即减少垃圾收集时间，让用户代码获得更长的运行时间；

      当应用程序运行在具有多个CPU上，对暂停时间没有特别高的要求时，即程序主要在后台进行计算，而不需要与用户进行太多交互；

      例如，那些执行批量处理、订单处理、工资支付、科学计算的应用程序；

  3、设置参数

      Parallel Scavenge收集器提供两个参数用于精确控制吞吐量：

  （A）、"-XX:MaxGCPauseMillis"

      控制最大垃圾收集停顿时间，大于0的毫秒数；

      MaxGCPauseMillis设置得稍小，停顿时间可能会缩短，但也可能会使得吞吐量下降；

      因为可能导致垃圾收集发生得更频繁；

   （B）、"-XX:GCTimeRatio"

      设置垃圾收集时间占总时间的比率，0<n<100的整数；

      GCTimeRatio相当于设置吞吐量大小；

      垃圾收集执行时间占应用程序执行时间的比例的计算方法是：

      1 / (1 + n)

      例如，选项-XX:GCTimeRatio=19，设置了垃圾收集时间占总时间的5%--1/(1+19)；

      默认值是1%--1/(1+99)，即n=99；

      垃圾收集所花费的时间是年轻一代和老年代收集的总时间；

      如果没有满足吞吐量目标，则增加代的内存大小以尽量增加用户程序运行的时间；

      此外，还有一个值得关注的参数：

  （C）、"-XX:+UseAdptiveSizePolicy"

      开启这个参数后，就不用手工指定一些细节参数，如：

      新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX:SurvivorRation）、晋升老年代的对象年龄（-XX:PretenureSizeThreshold）等；

      JVM会根据当前系统运行情况收集性能监控信息，动态调整这些参数，以提供最合适的停顿时间或最大的吞吐量，这种调节方式称为GC自适应的调节策略（GC 
      
      Ergonomiscs）；    

      这是一种值得推荐的方式：

      (1)、只需设置好内存数据大小（如"-Xmx"设置最大堆）；

      (2)、然后使用"-XX:MaxGCPauseMillis"或"-XX:GCTimeRatio"给JVM设置一个优化目标；

      (3)、那些具体细节参数的调节就由JVM自适应完成；        

      这也是Parallel Scavenge收集器与ParNew收集器一个重要区别；    

      更多目标调优和GC自适应的调节策略说明请参考：            

      《Memory Management in the Java HotSpot™ Virtual Machine》 5节 Ergonomics -- Automatic Selections and Behavior Tuning：             
      http://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf

      《Java Platform, Standard Edition HotSpot Virtual Machine Garbage Collection Tuning Guide》 第2节 Ergonomics：
      http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/ergonomics.html#ergonomics
      4、吞吐量与收集器关注点说明

  （A）、吞吐量（Throughput）

      CPU用于运行用户代码的时间与CPU总消耗时间的比值；

      即吞吐量=运行用户代码时间/（运行用户代码时间+垃圾收集时间）；    

      高吞吐量即减少垃圾收集时间，让用户代码获得更长的运行时间；

  （B）、垃圾收集器期望的目标（关注点）

  （1）、停顿时间    

      停顿时间越短就适合需要与用户交互的程序；

      良好的响应速度能提升用户体验；

  （2）、吞吐量

      高吞吐量则可以高效率地利用CPU时间，尽快完成运算的任务；

      主要适合在后台计算而不需要太多交互的任务；

  （3）、覆盖区（Footprint）

      在达到前面两个目标的情况下，尽量减少堆的内存空间；

      可以获得更好的空间局部性；

更多Parallel Scavenge收集器的信息请参考：

      官方的垃圾收集调优指南 第6节：http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/parallel.html#parallel_collector



上面介绍的都是新生代收集器，接下来开始介绍老年代收集器；

5、Serial Old收集器
      Serial Old是 Serial收集器的老年代版本；

1、特点

      针对老年代；

      采用"标记-整理"算法（还有压缩，Mark-Sweep-Compact）；

      单线程收集；

      Serial/Serial Old收集器运行示意图如下：



2、应用场景

      主要用于Client模式；

      而在Server模式有两大用途：

      （A）、在JDK1.5及之前，与Parallel Scavenge收集器搭配使用（JDK1.6有Parallel Old收集器可搭配）；

      （B）、作为CMS收集器的后备预案，在并发收集发生Concurrent Mode Failure时使用（后面详解）；

更多Serial Old收集器信息请参考：

      内存管理白皮书 4.3.2节：http://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf
      
     
6、Parallel Old收集器
      Parallel Old垃圾收集器是Parallel Scavenge收集器的老年代版本；

      JDK1.6中才开始提供；

  1、特点

      针对老年代；

      采用"标记-整理"算法；

      多线程收集；

      Parallel Scavenge/Parallel Old收集器运行示意图如下：



  2、应用场景

      JDK1.6及之后用来代替老年代的Serial Old收集器；

      特别是在Server模式，多CPU的情况下；

      这样在注重吞吐量以及CPU资源敏感的场景，就有了Parallel Scavenge加Parallel Old收集器的"给力"应用组合；

  3、设置参数

      "-XX:+UseParallelOldGC"：指定使用Parallel Old收集器；

  更多Parallel Old收集器收集过程介绍请参考：

      《内存管理白皮书》 4.5.2节：        http://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf
      并发标记清理（Concurrent Mark Sweep，CMS）收集器也称为并发低停顿收集器（Concurrent Low Pause Collector）或低延迟（low-latency）垃圾收集器；

      在前面ParNew收集器曾简单介绍过其特点；

1、特点

      针对老年代；

      基于"标记-清除"算法(不进行压缩操作，产生内存碎片)；            

      以获取最短回收停顿时间为目标；

      并发收集、低停顿；

      需要更多的内存（看后面的缺点）；

            

      是HotSpot在JDK1.5推出的第一款真正意义上的并发（Concurrent）收集器；

      第一次实现了让垃圾收集线程与用户线程（基本上）同时工作；

2、应用场景

      与用户交互较多的场景；        

      希望系统停顿时间最短，注重服务的响应速度；

      以给用户带来较好的体验；

      如常见WEB、B/S系统的服务器上的应用；

3、设置参数

      "-XX:+UseConcMarkSweepGC"：指定使用CMS收集器；

4、CMS收集器运作过程

      比前面几种收集器更复杂，可以分为4个步骤:

（A）、初始标记（CMS initial mark）

      仅标记一下GC Roots能直接关联到的对象；

      速度很快；

      但需要"Stop The World"；

（B）、并发标记（CMS concurrent mark）

      进行GC Roots Tracing的过程；

      刚才产生的集合中标记出存活对象；

      应用程序也在运行；

      并不能保证可以标记出所有的存活对象；

（C）、重新标记（CMS remark）

      为了修正并发标记期间因用户程序继续运作而导致标记变动的那一部分对象的标记记录；

      需要"Stop The World"，且停顿时间比初始标记稍长，但远比并发标记短；

      采用多线程并行执行来提升效率；

（D）、并发清除（CMS concurrent sweep）

      回收所有的垃圾对象；

      整个过程中耗时最长的并发标记和并发清除都可以与用户线程一起工作；

      所以总体上说，CMS收集器的内存回收过程与用户线程一起并发执行；

      CMS收集器运行示意图如下：




        5、CMS收集器3个明显的缺点

                     （A）、对CPU资源非常敏感
      并发收集虽然不会暂停用户线程，但因为占用一部分CPU资源，还是会导致应用程序变慢，总吞吐量降低。

      CMS的默认收集线程数量是=(CPU数量+3)/4；

      当CPU数量多于4个，收集线程占用的CPU资源多于25%，对用户程序影响可能较大；不足4个时，影响更大，可能无法接受。



      增量式并发收集器：

      针对这种情况，曾出现了"增量式并发收集器"（Incremental Concurrent Mark Sweep/i-CMS）；

      类似使用抢占式来模拟多任务机制的思想，让收集线程和用户线程交替运行，减少收集线程运行时间；

      但效果并不理想，JDK1.6后就官方不再提倡用户使用。

更多请参考：

      官方的《垃圾收集调优指南》8.8节 Incremental Mode：http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/cms.html#CJAGIIEJ

      《内存管理白皮书》 4.6.3节可以看到一些描述；

（B）、无法处理浮动垃圾,可能出现"Concurrent Mode Failure"失败

（1）、浮动垃圾（Floating Garbage）

      在并发清除时，用户线程新产生的垃圾，称为浮动垃圾；

      这使得并发清除时需要预留一定的内存空间，不能像其他收集器在老年代几乎填满再进行收集；

      也要可以认为CMS所需要的空间比其他垃圾收集器大；

      "-XX:CMSInitiatingOccupancyFraction"：设置CMS预留内存空间；

      JDK1.5默认值为68%；

      JDK1.6变为大约92%；               

（2）、"Concurrent Mode Failure"失败

      如果CMS预留内存空间无法满足程序需要，就会出现一次"Concurrent Mode Failure"失败；

      这时JVM启用后备预案：临时启用Serail Old收集器，而导致另一次Full GC的产生；

      这样的代价是很大的，所以CMSInitiatingOccupancyFraction不能设置得太大。

（C）、产生大量内存碎片

      由于CMS基于"标记-清除"算法，清除后不进行压缩操作；

      前面《Java虚拟机垃圾回收(二) 垃圾回收算法》"标记-清除"算法介绍时曾说过：

      产生大量不连续的内存碎片会导致分配大内存对象时，无法找到足够的连续内存，从而需要提前触发另一次Full GC动作。

      解决方法：                

（1）、"-XX:+UseCMSCompactAtFullCollection"

      使得CMS出现上面这种情况时不进行Full GC，而开启内存碎片的合并整理过程；

      但合并整理过程无法并发，停顿时间会变长；

      默认开启（但不会进行，结合下面的CMSFullGCsBeforeCompaction）；

（2）、"-XX:+CMSFullGCsBeforeCompaction"

      设置执行多少次不压缩的Full GC后，来一次压缩整理；

      为减少合并整理过程的停顿时间；

      默认为0，也就是说每次都执行Full GC，不会进行压缩整理；

      由于空间不再连续，CMS需要使用可用"空闲列表"内存分配方式，这比简单实用"碰撞指针"分配内存消耗大；

      更多关于内存分配方式请参考：《Java对象在Java虚拟机中的创建过程》

      总体来看，与Parallel Old垃圾收集器相比，CMS减少了执行老年代垃圾收集时应用暂停的时间；

      但却增加了新生代垃圾收集时应用暂停的时间、降低了吞吐量而且需要占用更大的堆空间；

更多CMS收集器信息请参考：

      《垃圾收集调优指南》 8节 Concurrent Mark Sweep (CMS) Collector：http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/cms.html#concurrent_mark_sweep_cms_collector

      《内存管理白皮书》 4.6节 Concurrent Mark-Sweep (CMS) Collector：http://www.oracle.com/technetwork/java/javase/tech/memorymanagement-whitepaper-1-150020.pdf
      8、G1收集器
      G1（Garbage-First）是JDK7-u4才推出商用的收集器；

1、特点

（A）、并行与并发

      能充分利用多CPU、多核环境下的硬件优势；

      可以并行来缩短"Stop The World"停顿时间；

      也可以并发让垃圾收集与用户程序同时进行；

（B）、分代收集，收集范围包括新生代和老年代    

      能独立管理整个GC堆（新生代和老年代），而不需要与其他收集器搭配；

      能够采用不同方式处理不同时期的对象；

                

      虽然保留分代概念，但Java堆的内存布局有很大差别；

      将整个堆划分为多个大小相等的独立区域（Region）；

      新生代和老年代不再是物理隔离，它们都是一部分Region（不需要连续）的集合；

      更多G1内存布局信息请参考：

      《垃圾收集调优指南》 9节：http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/g1_gc.html#garbage_first_garbage_collection

（C）、结合多种垃圾收集算法，空间整合，不产生碎片

      从整体看，是基于标记-整理算法；

      从局部（两个Region间）看，是基于复制算法；

      这是一种类似火车算法的实现；

 

      都不会产生内存碎片，有利于长时间运行；

（D）、可预测的停顿：低停顿的同时实现高吞吐量

      G1除了追求低停顿处，还能建立可预测的停顿时间模型；

      可以明确指定M毫秒时间片内，垃圾收集消耗的时间不超过N毫秒；

2、应用场景

      面向服务端应用，针对具有大内存、多处理器的机器；

      最主要的应用是为需要低GC延迟，并具有大堆的应用程序提供解决方案；

      如：在堆大小约6GB或更大时，可预测的暂停时间可以低于0.5秒；

            

      用来替换掉JDK1.5中的CMS收集器；

      在下面的情况时，使用G1可能比CMS好：

      （1）、超过50％的Java堆被活动数据占用；

      （2）、对象分配频率或年代提升频率变化很大；

      （3）、GC停顿时间过长（长于0.5至1秒）。

      是否一定采用G1呢？也未必：

      如果现在采用的收集器没有出现问题，不用急着去选择G1；

      如果应用程序追求低停顿，可以尝试选择G1；

      是否代替CMS需要实际场景测试才知道。

3、设置参数

      "-XX:+UseG1GC"：指定使用G1收集器；

      "-XX:InitiatingHeapOccupancyPercent"：当整个Java堆的占用率达到参数值时，开始并发标记阶段；默认为45；

      "-XX:MaxGCPauseMillis"：为G1设置暂停时间目标，默认值为200毫秒；

      "-XX:G1HeapRegionSize"：设置每个Region大小，范围1MB到32MB；目标是在最小Java堆时可以拥有约2048个Region；

      更多关于G1参数设置请参考：

      《垃圾收集调优指南》 10.5节：http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/g1_gc_tuning.html#important_defaults

4、为什么G1收集器可以实现可预测的停顿

      G1可以建立可预测的停顿时间模型，是因为：

      可以有计划地避免在Java堆的进行全区域的垃圾收集；

      G1跟踪各个Region获得其收集价值大小，在后台维护一个优先列表；

      每次根据允许的收集时间，优先回收价值最大的Region（名称Garbage-First的由来）；

      这就保证了在有限的时间内可以获取尽可能高的收集效率；

5、一个对象被不同区域引用的问题

      一个Region不可能是孤立的，一个Region中的对象可能被其他任意Region中对象引用，判断对象存活时，是否需要扫描整个Java堆才能保证准确？

      在其他的分代收集器，也存在这样的问题（而G1更突出）：

      回收新生代也不得不同时扫描老年代？

      这样的话会降低Minor GC的效率；

      解决方法：

      无论G1还是其他分代收集器，JVM都是使用Remembered Set来避免全局扫描：

      每个Region都有一个对应的Remembered Set；

      每次Reference类型数据写操作时，都会产生一个Write Barrier暂时中断操作；

      然后检查将要写入的引用指向的对象是否和该Reference类型数据在不同的Region（其他收集器：检查老年代对象是否引用了新生代对象）；

      如果不同，通过CardTable把相关引用信息记录到引用指向对象的所在Region对应的Remembered Set中；

                    

      当进行垃圾收集时，在GC根节点的枚举范围加入Remembered Set；

      就可以保证不进行全局扫描，也不会有遗漏。

6、G1收集器运作过程

      不计算维护Remembered Set的操作，可以分为4个步骤（与CMS较为相似）。

（A）、初始标记（Initial Marking）

      仅标记一下GC Roots能直接关联到的对象；

      且修改TAMS（Next Top at Mark Start）,让下一阶段并发运行时，用户程序能在正确可用的Region中创建新对象；

      需要"Stop The World"，但速度很快；

（B）、并发标记（Concurrent Marking）

      进行GC Roots Tracing的过程；

      刚才产生的集合中标记出存活对象；

      耗时较长，但应用程序也在运行；

      并不能保证可以标记出所有的存活对象；

（C）、最终标记（Final Marking）

      为了修正并发标记期间因用户程序继续运作而导致标记变动的那一部分对象的标记记录；

      上一阶段对象的变化记录在线程的Remembered Set Log；

      这里把Remembered Set Log合并到Remembered Set中；

                    

      需要"Stop The World"，且停顿时间比初始标记稍长，但远比并发标记短；

      采用多线程并行执行来提升效率；

（D）、筛选回收（Live Data Counting and Evacuation）

      首先排序各个Region的回收价值和成本；

      然后根据用户期望的GC停顿时间来制定回收计划；

      最后按计划回收一些价值高的Region中垃圾对象；

                    

      回收时采用"复制"算法，从一个或多个Region复制存活对象到堆上的另一个空的Region，并且在此过程中压缩和释放内存；

      可以并发进行，降低停顿时间，并增加吞吐量；

      G1收集器运行示意图如下：



更多G1收集器信息请参考：

      《垃圾收集调优指南》 9节 Garbage-First Garbage Collector：http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/g1_gc.html#garbage_first_garbage_collection

      《垃圾收集调优指南》 10节 Garbage-First Garbage Collector Tuning：http://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/g1_gc_tuning.html#g1_gc_tuning

        

      到这里，我们大体了解HotSpot虚拟机中的所有垃圾收集器，后面我们将去了解JVM的一些内存分配与回收策略、JVM垃圾收集相关调优方法……
8、理解GC日志
      33.125：[GC[DefNew：3324K-＞152K（3712K），0.0025925secs]3324K-＞152K（11904K），0.0031680 secs]

100.667：[FullGC[Tenured：0K-＞210K（10240K），0.0149142secs]4603K-＞210K（19456K），[Perm：2999K-＞2999K（21248K）]，0.0150007 secs][Times：user=0.01 sys=0.00，real=0.02 secs]
33.25：时间
GC/fullGC：垃圾收集停顿类型 后者说明有 stop-the-world
DefNew:Serial收集器的新生代名 ParNew:ParNew的新生代名 ，PSYoungGen：Parallel Scavenge的新生代名。老年代和永久代同理
3324k->152k（3712k）：GC前内存使用的容量，GC后内存使用的容量，总容量。
后面的3324K-＞152K（11904K）：这是Java堆的。
0.0025925secs：内存区域GC所占用的时间。秒
Times：user=0.01 sys=0.00，real=0.02 secs：也是时间 用户态消耗CPU，内核态消耗CPU和操作从开始到结束所经过的墙钟时间。
9、垃圾收集器参数总结
参数	描述
UseSerialGC	虚拟机运行在Client模式下的默认值，打开此开关后，使用Serial+Serial Old的收集器组合进行内存回收

UserParNewGC	打开磁开关后，使用ParNew+SerialOld的收集器组合进行内存回收

UseConcMarkSweepGC	打开此开关后，使用ParNew+CMS+Serial Old的收集器组合进行内存回收。Serial Old收集器将作为CMS收集器出现Concurrent Mode Failure失败后的后备收集器使用

UserParallelGC	虚拟机运行在Server模式下的默认值，打开此开关后，使用Parallel Scavenge+Serial Old（PS MarkSweep）收集器组合进行内存回收

UserParallelOldGC	打开此开关后，使用Parallel Scavenge + Parallel Old的收集器组合进行内存回收

SurvivorRatio	新生代中Eden区域与Survivor区域的容量比值，默认为8，代表Eden：Survivor = 8：1

PretenureSizeThreshold	直接晋升到老年代的对象大小，设置这个参数后，大于这个参数的对象将直接在老年代分配

MaxTenuringThreshold	晋升到老年代的对象年龄。每个对象在坚持过一次Minor GC之后，年龄就增加1，当超过这个参数值就进入老年代

UseAdaptiveSizePolicy	动态调整Java堆中各个区域的大小以及进入老年代的年龄

HandlePromotionFailure	是否允许分配担保失败，即老年代的剩余空间不足以应付新生代的整个Eden和Survivor区的所有对象都存活的极端情况

ParallelGCThreads	设置并行GC时进行内存回收的线程数

GCTimeRatio	GC时间占总时间的比率，默认值为99，即允许1%的GC时间，仅在使用Parallel Scavenge收集器时生效

MaxGCPauseMills	设置GC的最大停顿时间。仅在使用Parallel Scavenge收集器时生效

CMSInitiatingOccupancyFraction	设置CMS收集器在老年代空间被使用多少后触发垃圾收集。默认值为68%，仅在使用CMS收集器时生效

UseCMSCompactAtFullCollection	设置CMS收集器在完成垃圾收集后是否要进行一次内存碎片整理。仅在使用CMS收集器时生效

CMSFullGCBeforeCompaction	设置CMS收集器在进行若干次垃圾收集后再启动一次内存碎片整理。仅在使用CMS收集器时生效（默认值为0，表示每次进入Full GC时都进行碎片整理）
2.3.


      
